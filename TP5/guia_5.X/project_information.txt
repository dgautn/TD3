Tecnicas Digitales 3
Trabajo Practico no. 5

    Dante Ruiz  - leg. 49881
    Juan Ignacio Nicolodi  - leg. 66875
    Sebastián Cueva Bono  - leg. 56016
    Darío Gustavo Albarrán  - leg. 43143

Codigo agregado por ejercicio:

Ejercicio 1
    user.c                      - Configura I/O : led1, led2, boton1
    main.c                      - Bucle que se ejecuta ciclicamente

Ejercicio 2.1
    user.c                      - ConfigTimer();
                                - valor del período de 32 bits = 0x400000
    interrupts.c                - Codigo que se ejecuta con _T3Interrupt

Ejercicio 2.2
    configuration_bits.c        - FOSCSEL , FOSC
    system.c                    - habilitar con #if 1 para configurar PLL
    user.c                      - ConfigTimer(); (modifica el ej. 2.1)
                                - valor del período de 32 bits = 0x2625A00

Ejercicio 3.1
    user.c                      - ConfigTimer(); (como el ej. 2.2)
                                - ConfigDACsinDMA();
    main.c                      - declara variable global -> uint16_t out_DAC
    interrupts.c                - variable global -> extern uint16_t out_DAC
                                - Codigo que se ejecuta con _DAC1LInterrupt
    configuration_bits.c        - misma configuracion que ejercicio 2.2

Ejercicio 3.2
    user.c                      - (no hace falta) ConfigTimer(); (como el ej. 2.2)
                                - ConfigDMA0_DMA1();
                                - ConfigDACconDMA();
                                - variable global extern buffers A y B, izq y der
    main.c                      - declara variables globales en memoria DMA
    configuration_bits.c        - misma configuracion que ejercicio 2.2

Ejercicio 4
    user.c                      - (no hace falta) ConfigTimer(); (como el ej. 2.2)
                                - ConfigDMA0_DMA1(); (como el ej. 3.2)
                                - ConfigDACconDMA(); (como el ej. 3.2)
                                - variable global extern buffers A y B, izq y der (como el ej. 3.2)
                                - ConfigDMA2();
                                - ConfigTimer5();
                                - ConfigADC();
    main.c                      - declara variables globales en memoria DMA (como el ej. 3.2)
    configuration_bits.c        - misma configuracion que ejercicio 2.2

Ejercicio 5
    user.c                      - (no hace falta) ConfigTimer(); (como el ej. 2.2)
                                - ConfigUART();
    interrupts.c                - Codigo que se ejecuta con _U1RXInterrupt

En <user.h> se se declaran todas las funciones de user.c

FILES INCLUDED IN THE PROJECT TREE:

system.h - Contains custom oscillator configuration function prototypes,
reset source evaluation function prototypes, and non-peripheral
microcontroller initialization function prototypes.  It also may contain
system level #define macros and variables.  This file is included
by system.c

user.h - Contains parameters and function prototypes used in user.c for user
level functions, for example, InitApp();

configuration_bits.c - Contains device configuration bit macros.  Refer to
the comments in configuration_bits.c for instructions on where to get
information about device configuration bits and their corresponding macros.

interrupts.c - This file contains example stubs for interrupts.  The user would
put the interrupt vectors for their application in interrupts.c.

main.c - This is the main code for the project.  global variables and the
main() function are located in main.c  The user would put their primary program
flow in main.c, and the operation should be contained in main.c with an
infinite loop.

system.c - Contains custom oscillator configuration functions, reset source
evaluation functions, and non-peripheral microcontroller initialization
functions.  Functions in system.c would often be called from main.c during
device initialization.

traps.c - Generally speaking, a user would not modify this file unless
they were having problems resulting in traps.  If the code in this file
is entered, that means there is a critical hardware problem or software bug.
The trap will need evaluated by the user to determine the source
of the problem.  www.microchip.com/codeexamples contains trap example code
which can be used as a reference to help debug traps.

user.c - Custom user algorithms, user peripheral initialization, data
computation functions, and calculation functions would go here.  Prototypes for
user.c would go in user.h.

